meta {
  name: Capture Request Async
  type: http
  seq: 3
}

post {
  url: {{baseUrl}}capture
  body: json
  auth: basic
}

headers {
  GS1-Capture-Error-Behaviour: rollback
}

auth:basic {
  username: {{username}}
  password: {{password}}
}

body:json {
  {
    "@context": [
      "https://ref.gs1.org/standards/epcis/2.0.0/epcis-context.jsonld"
    ],
    "id": "https://id.example.org/document1",
    "type": "EPCISDocument",
    "schemaVersion": "2.0",
    "creationDate": "2022-10-17T08:42:00.000+02:00",
    "epcisBody": {
      "eventList": [
        {
      "type": "TransactionEvent",
      "eventTime": "2024-08-26T20:06:14.000Z",
                "eventTimeZoneOffset": "+01:00",
                "action": "ADD",
          "epcList":[],
      "quantityList":[
          {
              "epcClass": "urn:epc:id:gtin:9780306406157",
              "quantity": 1600,
              "uom": "KGM"
          }
      ],
      "readPoint": {
          "id": "https://id.gs1.org/414/0123456789"
      },
      "bizLocation":{
          "id":"https://id.gs1.org/414/0123456789"
      },
      "bizStep": "installing",
      "disposition": "completeness_verified",
      "bizTransactionList": [
          {
              "type": "po",
              "bizTransaction": "urn:epcis:A-3961"
          }
      ],
      "sourceList":[
          {
              "type": "possessing_party",
              "source": "MISSING: GS1 GLN of PossessingParty"
          }
      ],
      "destinationList":[
          {
              "type": "owning_party",
              "destination": "MISSING: GS1 GLN of OwningParty"
          }
      ],
      "certificationInfo":[
          "https://www.iso.org/standard/62085.html",
          "https://qualityinspection.org/what-is-certificate-of-conformity-coc/"
      ]
  }
      ]
    }
  }
}

assert {
  res.status: eq 202
  res.headers.location: isDefined
}

tests {
  test("Should contain the location header", function() {
    expect(res.headers.location).to.equals("capture/" + res.body.Id);
  });
  
}

docs {
  # Asynchronous capture endpoint for one or more EPCIS events.
  
  EPCIS events are added in bulk using the capture interface. Four design considerations were made to remain compatible with EPCIS 1.2:
  
  - EPCIS 2.0 keeps event IDs optional. If event IDs are missing, the server should populate the event ID with a unique value. Otherwise, it won't be possible to retrieve these events by eventID.
  - By default, EPCIS events are only stored if the entire capture job was successful. This behaviour can be changed with the `GS1-Capture-Error-Behaviour` header.
  - EPCIS master data can be captured in the header (`epcisHeader`) of an `EPCISDocument`.
  - This endpoint should support both `EPCISDocument` and `EPCISQueryDocument` as input. To prevent timeouts for large payloads, the client potentially may need to split the payload into several capture calls. To that end, the server can specify a capture limit (number of EPCIS events) and file size limit (payload size). A successful capturing of events does not guarantee that events will be stored. Instead, the server returns a capture id, which the client can use to obtain information about the capture job.
}
