// <auto-generated />
using System;
using FasTnT.Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FasTnT.Postgres.Migrations
{
    [DbContext(typeof(EpcisContext))]
    partial class EpcisContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FasTnT.Domain.Model.CustomQueries.StoredQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("data_source");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("UserId")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("stored_query", "queries");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            DataSource = "SimpleEventQuery",
                            Name = "SimpleEventQuery"
                        },
                        new
                        {
                            Id = -1,
                            DataSource = "SimpleMasterDataQuery",
                            Name = "SimpleMasterDataQuery"
                        });
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Action")
                        .HasColumnType("smallint")
                        .HasColumnName("action");

                    b.Property<string>("BusinessLocation")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("business_location");

                    b.Property<string>("BusinessStep")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("business_step");

                    b.Property<string>("CaptureId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CaptureTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("capture_time");

                    b.Property<string>("CertificationInfo")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("certification_info");

                    b.Property<DateTimeOffset?>("CorrectiveDeclarationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("corrective_declaration_time");

                    b.Property<string>("CorrectiveReason")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("corrective_reason");

                    b.Property<string>("Disposition")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("disposition");

                    b.Property<string>("EventId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("event_id");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_time");

                    b.Property<short>("EventTimeZoneOffset")
                        .HasColumnType("smallint")
                        .HasColumnName("event_timezone_offset");

                    b.Property<string>("ReadPoint")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("read_point");

                    b.Property<string>("TransformationId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("transformation_id");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int?>("request_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("request_id");

                    b.ToTable("event", "epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Masterdata.MasterData", b =>
                {
                    b.Property<int>("request_id")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("type");

                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("id");

                    b.HasKey("request_id", "Type", "Id");

                    b.ToTable("masterdata", "cbv");

                    b.ToView("current_masterdata", "cbv");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Masterdata.MasterDataHierarchy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Root")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("root");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.ToTable((string)null);

                    b.ToView("masterdata_hierarchy", "cbv");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CaptureId")
                        .HasColumnType("text")
                        .HasColumnName("capture_id");

                    b.Property<DateTimeOffset>("CaptureTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("capture_time");

                    b.Property<DateTimeOffset>("DocumentTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("document_time");

                    b.Property<string>("SchemaVersion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schema_version");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("request", "epcis", t =>
                        {
                            t.HasTrigger("subscription_pending_requests");
                        });
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.PendingRequest", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<string>("RequestId")
                        .HasColumnType("text")
                        .HasColumnName("request_id");

                    b.HasKey("SubscriptionId", "RequestId");

                    b.ToTable("pending_request", "subscriptions");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Datasource")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("datasource");

                    b.Property<string>("Destination")
                        .HasColumnType("text")
                        .HasColumnName("destination");

                    b.Property<string>("FormatterName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("formatter_name");

                    b.Property<DateTimeOffset?>("InitialRecordTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("initial_record_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("QueryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("query_name");

                    b.Property<bool>("ReportIfEmpty")
                        .HasColumnType("boolean")
                        .HasColumnName("report_if_empty");

                    b.Property<string>("SignatureToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("signature_token");

                    b.Property<string>("Trigger")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("trigger");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("subscription", "subscriptions", t =>
                        {
                            t.HasTrigger("subscription_initial_requests");
                        });
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.SubscriptionExecutionRecord", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<DateTimeOffset>("ExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("execution_time");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<bool>("ResultsSent")
                        .HasColumnType("boolean")
                        .HasColumnName("results_sent");

                    b.Property<bool>("Successful")
                        .HasColumnType("boolean")
                        .HasColumnName("successful");

                    b.HasKey("SubscriptionId", "ExecutionTime");

                    b.ToTable("subscription_execution_record", "subscriptions");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.CustomQueries.StoredQuery", b =>
                {
                    b.OwnsMany("FasTnT.Domain.Model.CustomQueries.StoredQueryParameter", "Parameters", b1 =>
                        {
                            b1.Property<int>("query_id")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<int>("QueryId")
                                .HasColumnType("integer");

                            b1.Property<string>("Values")
                                .HasColumnType("text")
                                .HasColumnName("values");

                            b1.HasKey("query_id", "Name");

                            b1.HasIndex("QueryId");

                            b1.ToTable("stored_query_parameter", "subscriptions");

                            b1.WithOwner("Query")
                                .HasForeignKey("QueryId");

                            b1.Navigation("Query");
                        });

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Event", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Request", "Request")
                        .WithMany("Events")
                        .HasForeignKey("request_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("FasTnT.Domain.Model.Events.BusinessTransaction", "Transactions", b1 =>
                        {
                            b1.Property<int>("event_id")
                                .HasColumnType("integer");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasColumnName("type");

                            b1.Property<string>("Id")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("id");

                            b1.HasKey("event_id", "Type", "Id");

                            b1.ToTable("business_transaction", "epcis");

                            b1.WithOwner("Event")
                                .HasForeignKey("event_id");

                            b1.Navigation("Event");
                        });

                    b.OwnsMany("FasTnT.Domain.Model.Events.CorrectiveEventId", "CorrectiveEventIds", b1 =>
                        {
                            b1.Property<int>("event_id")
                                .HasColumnType("integer");

                            b1.Property<string>("CorrectiveId")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("corrective_id");

                            b1.HasKey("event_id", "CorrectiveId");

                            b1.ToTable("corrective_event_id", "epcis");

                            b1.WithOwner("Event")
                                .HasForeignKey("event_id");

                            b1.Navigation("Event");
                        });

                    b.OwnsMany("FasTnT.Domain.Model.Events.Destination", "Destinations", b1 =>
                        {
                            b1.Property<int>("event_id")
                                .HasColumnType("integer");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasColumnName("type");

                            b1.Property<string>("Id")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("id");

                            b1.HasKey("event_id", "Type", "Id");

                            b1.ToTable("destination", "epcis");

                            b1.WithOwner("Event")
                                .HasForeignKey("event_id");

                            b1.Navigation("Event");
                        });

                    b.OwnsMany("FasTnT.Domain.Model.Events.Epc", "Epcs", b1 =>
                        {
                            b1.Property<int>("event_id")
                                .HasColumnType("integer");

                            b1.Property<short>("Type")
                                .HasColumnType("smallint")
                                .HasColumnName("type");

                            b1.Property<string>("Id")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("id");

                            b1.Property<float?>("Quantity")
                                .HasColumnType("real")
                                .HasColumnName("quantity");

                            b1.Property<string>("UnitOfMeasure")
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("unit_of_measure");

                            b1.HasKey("event_id", "Type", "Id");

                            b1.ToTable("epc", "epcis");

                            b1.WithOwner("Event")
                                .HasForeignKey("event_id");

                            b1.Navigation("Event");
                        });

                    b.OwnsMany("FasTnT.Domain.Model.Events.Field", "Fields", b1 =>
                        {
                            b1.Property<int>("event_id")
                                .HasColumnType("integer");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<DateTimeOffset?>("DateValue")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("date_value");

                            b1.Property<int?>("EntityIndex")
                                .HasColumnType("integer")
                                .HasColumnName("entity_index");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("name");

                            b1.Property<string>("Namespace")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("namespace");

                            b1.Property<double?>("NumericValue")
                                .HasColumnType("double precision")
                                .HasColumnName("numeric_value");

                            b1.Property<int?>("ParentIndex")
                                .HasColumnType("integer")
                                .HasColumnName("parent_index");

                            b1.Property<string>("TextValue")
                                .HasColumnType("text")
                                .HasColumnName("text_value");

                            b1.Property<short>("Type")
                                .HasColumnType("smallint")
                                .HasColumnName("type");

                            b1.HasKey("event_id", "Index");

                            b1.ToTable("field", "epcis");

                            b1.WithOwner("Event")
                                .HasForeignKey("event_id");

                            b1.Navigation("Event");
                        });

                    b.OwnsMany("FasTnT.Domain.Model.Events.PersistentDisposition", "PersistentDispositions", b1 =>
                        {
                            b1.Property<int>("event_id")
                                .HasColumnType("integer");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("type");

                            b1.Property<string>("Id")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("id");

                            b1.HasKey("event_id", "Type", "Id");

                            b1.ToTable("persistent_disposition", "epcis");

                            b1.WithOwner("Event")
                                .HasForeignKey("event_id");

                            b1.Navigation("Event");
                        });

                    b.OwnsMany("FasTnT.Domain.Model.Events.SensorElement", "SensorElements", b1 =>
                        {
                            b1.Property<int>("event_id")
                                .HasColumnType("integer");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("BizRules")
                                .HasColumnType("text")
                                .HasColumnName("biz_rules");

                            b1.Property<string>("DataProcessingMethod")
                                .HasColumnType("text")
                                .HasColumnName("data_processing_method");

                            b1.Property<string>("DeviceId")
                                .HasColumnType("text")
                                .HasColumnName("device_id");

                            b1.Property<string>("DeviceMetadata")
                                .HasColumnType("text")
                                .HasColumnName("device_metadata");

                            b1.Property<DateTimeOffset?>("EndTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_time");

                            b1.Property<string>("RawData")
                                .HasColumnType("text")
                                .HasColumnName("raw_data");

                            b1.Property<DateTimeOffset?>("StartTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("start_time");

                            b1.Property<DateTimeOffset?>("Time")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("time");

                            b1.HasKey("event_id", "Index");

                            b1.ToTable("sensor_element", "epcis");

                            b1.WithOwner("Event")
                                .HasForeignKey("event_id");

                            b1.OwnsMany("FasTnT.Domain.Model.Events.SensorReport", "Reports", b2 =>
                                {
                                    b2.Property<int>("event_id")
                                        .HasColumnType("integer");

                                    b2.Property<int>("sensor_index")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Index")
                                        .HasColumnType("integer")
                                        .HasColumnName("index");

                                    b2.Property<bool>("BooleanValue")
                                        .HasColumnType("boolean")
                                        .HasColumnName("boolean_value");

                                    b2.Property<string>("ChemicalSubstance")
                                        .HasColumnType("text")
                                        .HasColumnName("chemical_substance");

                                    b2.Property<string>("Component")
                                        .HasColumnType("text")
                                        .HasColumnName("component");

                                    b2.Property<string>("DataProcessingMethod")
                                        .HasColumnType("text")
                                        .HasColumnName("data_processing_method");

                                    b2.Property<string>("DeviceId")
                                        .HasColumnType("text")
                                        .HasColumnName("device_id");

                                    b2.Property<string>("DeviceMetadata")
                                        .HasColumnType("text")
                                        .HasColumnName("device_metadata");

                                    b2.Property<string>("HexBinaryValue")
                                        .HasColumnType("text")
                                        .HasColumnName("hex_binary_value");

                                    b2.Property<float?>("MaxValue")
                                        .HasColumnType("real")
                                        .HasColumnName("max_value");

                                    b2.Property<float?>("MeanValue")
                                        .HasColumnType("real")
                                        .HasColumnName("mean_value");

                                    b2.Property<string>("Microorganism")
                                        .HasColumnType("text")
                                        .HasColumnName("microorganism");

                                    b2.Property<float?>("MinValue")
                                        .HasColumnType("real")
                                        .HasColumnName("min_value");

                                    b2.Property<float?>("PercRank")
                                        .HasColumnType("real")
                                        .HasColumnName("perc_rank");

                                    b2.Property<float?>("PercValue")
                                        .HasColumnType("real")
                                        .HasColumnName("perc_value");

                                    b2.Property<string>("RawData")
                                        .HasColumnType("text")
                                        .HasColumnName("raw_data");

                                    b2.Property<float?>("SDev")
                                        .HasColumnType("real")
                                        .HasColumnName("sdev");

                                    b2.Property<string>("StringValue")
                                        .HasColumnType("text")
                                        .HasColumnName("string_value");

                                    b2.Property<DateTimeOffset?>("Time")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("time");

                                    b2.Property<string>("Type")
                                        .HasColumnType("text")
                                        .HasColumnName("type");

                                    b2.Property<string>("UnitOfMeasure")
                                        .HasColumnType("text")
                                        .HasColumnName("unit_of_measure");

                                    b2.Property<string>("UriValue")
                                        .HasColumnType("text")
                                        .HasColumnName("uri_value");

                                    b2.Property<float?>("Value")
                                        .HasColumnType("real")
                                        .HasColumnName("value");

                                    b2.HasKey("event_id", "sensor_index", "Index");

                                    b2.ToTable("sensor_report", "epcis");

                                    b2.WithOwner("SensorElement")
                                        .HasForeignKey("event_id", "sensor_index");

                                    b2.Navigation("SensorElement");
                                });

                            b1.Navigation("Event");

                            b1.Navigation("Reports");
                        });

                    b.OwnsMany("FasTnT.Domain.Model.Events.Source", "Sources", b1 =>
                        {
                            b1.Property<int>("event_id")
                                .HasColumnType("integer");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasColumnName("type");

                            b1.Property<string>("Id")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("id");

                            b1.HasKey("event_id", "Type", "Id");

                            b1.ToTable("source", "epcis");

                            b1.WithOwner("Event")
                                .HasForeignKey("event_id");

                            b1.Navigation("Event");
                        });

                    b.Navigation("CorrectiveEventIds");

                    b.Navigation("Destinations");

                    b.Navigation("Epcs");

                    b.Navigation("Fields");

                    b.Navigation("PersistentDispositions");

                    b.Navigation("Request");

                    b.Navigation("SensorElements");

                    b.Navigation("Sources");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Masterdata.MasterData", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Request", "Request")
                        .WithMany("Masterdata")
                        .HasForeignKey("request_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("FasTnT.Domain.Model.Masterdata.MasterDataChildren", "Children", b1 =>
                        {
                            b1.Property<int>("masterdata_request_id")
                                .HasColumnType("integer");

                            b1.Property<string>("masterdata_type")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("masterdata_id")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("ChildrenId")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("children_id");

                            b1.HasKey("masterdata_request_id", "masterdata_type", "masterdata_id", "ChildrenId");

                            b1.ToTable("masterdata_children", "cbv");

                            b1.WithOwner("MasterData")
                                .HasForeignKey("masterdata_request_id", "masterdata_type", "masterdata_id");

                            b1.Navigation("MasterData");
                        });

                    b.OwnsMany("FasTnT.Domain.Model.Masterdata.MasterDataAttribute", "Attributes", b1 =>
                        {
                            b1.Property<int>("request_id")
                                .HasColumnType("integer");

                            b1.Property<string>("masterdata_type")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("masterdata_id")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Id")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("value");

                            b1.HasKey("request_id", "masterdata_type", "masterdata_id", "Id");

                            b1.ToTable("masterdata_attribute", "cbv");

                            b1.WithOwner("MasterData")
                                .HasForeignKey("request_id", "masterdata_type", "masterdata_id");

                            b1.OwnsMany("FasTnT.Domain.Model.Masterdata.MasterDataField", "Fields", b2 =>
                                {
                                    b2.Property<int>("request_id")
                                        .HasColumnType("integer");

                                    b2.Property<string>("masterdata_type")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)");

                                    b2.Property<string>("masterdata_id")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)");

                                    b2.Property<string>("attribute_id")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)");

                                    b2.Property<string>("Namespace")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("namespace");

                                    b2.Property<string>("Name")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("name");

                                    b2.Property<string>("ParentName")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("parent_name");

                                    b2.Property<string>("ParentNamespace")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("parent_namespace");

                                    b2.Property<string>("Value")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("value");

                                    b2.HasKey("request_id", "masterdata_type", "masterdata_id", "attribute_id", "Namespace", "Name");

                                    b2.ToTable("masterdata_field", "cbv");

                                    b2.WithOwner("Attribute")
                                        .HasForeignKey("request_id", "masterdata_type", "masterdata_id", "attribute_id");

                                    b2.Navigation("Attribute");
                                });

                            b1.Navigation("Fields");

                            b1.Navigation("MasterData");
                        });

                    b.Navigation("Attributes");

                    b.Navigation("Children");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Request", b =>
                {
                    b.OwnsOne("FasTnT.Domain.Model.StandardBusinessHeader", "StandardBusinessHeader", b1 =>
                        {
                            b1.Property<int>("request_id")
                                .HasColumnType("integer");

                            b1.Property<DateTimeOffset?>("CreationDateTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("creation_date_time");

                            b1.Property<string>("InstanceIdentifier")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("instance_identifier");

                            b1.Property<string>("Standard")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("standard");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("type");

                            b1.Property<string>("TypeVersion")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("type_version");

                            b1.Property<string>("Version")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("version");

                            b1.HasKey("request_id");

                            b1.ToTable("standard_business_header", "sbdh");

                            b1.WithOwner("Request")
                                .HasForeignKey("request_id");

                            b1.OwnsMany("FasTnT.Domain.Model.Events.ContactInformation", "ContactInformations", b2 =>
                                {
                                    b2.Property<int>("request_id")
                                        .HasColumnType("integer");

                                    b2.Property<short>("Type")
                                        .HasMaxLength(256)
                                        .HasColumnType("smallint")
                                        .HasColumnName("type");

                                    b2.Property<string>("Identifier")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("identifier");

                                    b2.Property<string>("Contact")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("contact");

                                    b2.Property<string>("ContactTypeIdentifier")
                                        .HasColumnType("text")
                                        .HasColumnName("contact_type_identifier");

                                    b2.Property<string>("EmailAddress")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("email_address");

                                    b2.Property<string>("FaxNumber")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("fax_number");

                                    b2.Property<string>("TelephoneNumber")
                                        .HasColumnType("text")
                                        .HasColumnName("telephone_number");

                                    b2.HasKey("request_id", "Type", "Identifier");

                                    b2.ToTable("contact_information", "sbdh");

                                    b2.WithOwner("Header")
                                        .HasForeignKey("request_id");

                                    b2.Navigation("Header");
                                });

                            b1.Navigation("ContactInformations");

                            b1.Navigation("Request");
                        });

                    b.OwnsOne("FasTnT.Domain.Model.Subscriptions.SubscriptionCallback", "SubscriptionCallback", b1 =>
                        {
                            b1.Property<int>("request_id")
                                .HasColumnType("integer");

                            b1.Property<short>("CallbackType")
                                .HasColumnType("smallint")
                                .HasColumnName("callback_type");

                            b1.Property<string>("Reason")
                                .HasColumnType("text")
                                .HasColumnName("reason");

                            b1.Property<string>("SubscriptionId")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("subscription_id");

                            b1.HasKey("request_id");

                            b1.ToTable("subscription_callback", "epcis");

                            b1.WithOwner("Request")
                                .HasForeignKey("request_id");

                            b1.Navigation("Request");
                        });

                    b.Navigation("StandardBusinessHeader");

                    b.Navigation("SubscriptionCallback");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.Subscription", b =>
                {
                    b.OwnsMany("FasTnT.Domain.Model.Subscriptions.SubscriptionParameter", "Parameters", b1 =>
                        {
                            b1.Property<int>("subscription_id")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("name");

                            b1.Property<int>("SubscriptionId")
                                .HasColumnType("integer");

                            b1.Property<string>("Values")
                                .HasColumnType("text")
                                .HasColumnName("values");

                            b1.HasKey("subscription_id", "Name");

                            b1.HasIndex("SubscriptionId");

                            b1.ToTable("subscription_parameter", "subscriptions");

                            b1.WithOwner("Subscription")
                                .HasForeignKey("SubscriptionId");

                            b1.Navigation("Subscription");
                        });

                    b.OwnsOne("FasTnT.Domain.Model.Subscriptions.SubscriptionSchedule", "Schedule", b1 =>
                        {
                            b1.Property<int>("subscription_id")
                                .HasColumnType("integer");

                            b1.Property<string>("DayOfMonth")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("day_of_month");

                            b1.Property<string>("DayOfWeek")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("day_of_week");

                            b1.Property<string>("Hour")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("hour");

                            b1.Property<string>("Minute")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("minute");

                            b1.Property<string>("Month")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("month");

                            b1.Property<string>("Second")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("second");

                            b1.HasKey("subscription_id");

                            b1.ToTable("subscription_schedule", "subscriptions");

                            b1.WithOwner()
                                .HasForeignKey("subscription_id");
                        });

                    b.Navigation("Parameters");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Request", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Masterdata");
                });
#pragma warning restore 612, 618
        }
    }
}
