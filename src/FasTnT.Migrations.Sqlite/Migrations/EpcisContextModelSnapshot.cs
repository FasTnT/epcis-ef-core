// <auto-generated />
using System;
using FasTnT.EfCore.Store;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FasTnT.Migrations.Sqlite.Migrations
{
    [DbContext(typeof(EpcisContext))]
    partial class EpcisContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("FasTnT.Domain.Model.CustomQueries.StoredQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StoredQuery", "Queries");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            DataSource = "SimpleEventQuery",
                            Name = "SimpleEventQuery"
                        },
                        new
                        {
                            Id = -1,
                            DataSource = "SimpleMasterDataQuery",
                            Name = "SimpleMasterDataQuery"
                        });
                });

            modelBuilder.Entity("FasTnT.Domain.Model.CustomQueries.StoredQueryParameter", b =>
                {
                    b.Property<int>("QueryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Values")
                        .HasColumnType("TEXT");

                    b.HasKey("QueryId", "Name");

                    b.ToTable("StoredQueryParameter", "Subscription");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.BusinessTransaction", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("EventId", "Type", "Id");

                    b.ToTable("BusinessTransaction", "Epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.ContactInformation", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Type")
                        .HasMaxLength(256)
                        .HasColumnType("INTEGER");

                    b.Property<string>("Identifier")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Contact")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactTypeIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId", "Type", "Identifier");

                    b.ToTable("ContactInformation", "Sbdh");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.CorrectiveEventId", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CorrectiveId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("EventId", "CorrectiveId");

                    b.ToTable("CorrectiveEventId", "Epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Destination", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("EventId", "Type", "Id");

                    b.ToTable("Destination", "Epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Epc", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<float?>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("EventId", "Type", "Id");

                    b.ToTable("Epc", "Epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BusinessLocation")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessStep")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CaptureTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CertificationInfo")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("CorrectiveDeclarationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CorrectiveReason")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Disposition")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("EventId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("TEXT");

                    b.Property<short>("EventTimeZoneOffset")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReadPoint")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransformationId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<short>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Event", "Epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Field", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("DateValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Namespace")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<double?>("NumericValue")
                        .HasColumnType("REAL");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReportId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SensorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextValue")
                        .HasColumnType("TEXT");

                    b.Property<short>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "FieldId");

                    b.HasIndex("EventId", "ParentId");

                    b.HasIndex("EventId", "SensorId", "ReportId");

                    b.ToTable("Field", "Epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterData", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId", "Type", "Id");

                    b.ToTable("MasterData", "Cbv");

                    b.ToView("CurrentMasterdata", "Cbv");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterDataAttribute", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MasterdataType")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("MasterdataId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId", "MasterdataType", "MasterdataId", "Id");

                    b.ToTable("MasterDataAttribute", "Cbv");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterDataChildren", b =>
                {
                    b.Property<int?>("MasterDataRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MasterDataType")
                        .HasColumnType("TEXT");

                    b.Property<string>("MasterDataId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildrenId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("MasterDataRequestId", "MasterDataType", "MasterDataId", "ChildrenId");

                    b.ToTable("MasterDataChildren", "Cbv");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterDataField", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MasterdataType")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("MasterdataId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("AttributeId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Namespace")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentNamespace")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId", "MasterdataType", "MasterdataId", "AttributeId", "Namespace", "Name");

                    b.ToTable("MasterDataField", "Cbv");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterDataHierarchy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RequestId", "Type", "Id");

                    b.ToTable((string)null);

                    b.ToView("MasterDataHierarchy", "Cbv");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.PersistentDisposition", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("EventId", "Type", "Id");

                    b.ToTable("PersistentDisposition", "Epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.SensorElement", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SensorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BizRules")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataProcessingMethod")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceMetadata")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("RawData")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("EventId", "SensorId");

                    b.ToTable("SensorElement", "Epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.SensorReport", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SensorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BooleanValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChemicalSubstance")
                        .HasColumnType("TEXT");

                    b.Property<string>("Component")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataProcessingMethod")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceMetadata")
                        .HasColumnType("TEXT");

                    b.Property<string>("HexBinaryValue")
                        .HasColumnType("TEXT");

                    b.Property<float?>("MaxValue")
                        .HasColumnType("REAL");

                    b.Property<float?>("MeanValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Microorganism")
                        .HasColumnType("TEXT");

                    b.Property<float?>("MinValue")
                        .HasColumnType("REAL");

                    b.Property<float?>("PercRank")
                        .HasColumnType("REAL");

                    b.Property<float?>("PercValue")
                        .HasColumnType("REAL");

                    b.Property<string>("RawData")
                        .HasColumnType("TEXT");

                    b.Property<float?>("SDev")
                        .HasColumnType("REAL");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("TEXT");

                    b.Property<string>("UriValue")
                        .HasColumnType("TEXT");

                    b.Property<float?>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("EventId", "SensorId", "ReportId");

                    b.ToTable("SensorReport", "Epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Source", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("EventId", "Type", "Id");

                    b.ToTable("Source", "Epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CaptureDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaptureId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("DocumentTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchemaVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Request", "Epcis", t =>
                        {
                            t.HasTrigger("SubscriptionPendingRequests");
                        });
                });

            modelBuilder.Entity("FasTnT.Domain.Model.StandardBusinessHeader", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstanceIdentifier")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Standard")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeVersion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId");

                    b.ToTable("StandardBusinessHeader", "Sbdh");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.PendingRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RequestId", "SubscriptionId");

                    b.ToTable("PendingRequest", "Subscription");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Destination")
                        .HasColumnType("TEXT");

                    b.Property<string>("FormatterName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("InitialRecordTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("QueryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QueryName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReportIfEmpty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SignatureToken")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Trigger")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QueryId");

                    b.ToTable("Subscription", "Subscription", t =>
                        {
                            t.HasTrigger("SubscriptionInitialRequests");
                        });
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.SubscriptionCallback", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("CallbackType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId");

                    b.ToTable("SubscriptionCallback", "Epcis");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.SubscriptionExecutionRecord", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ExecutionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ResultsSent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Successful")
                        .HasColumnType("INTEGER");

                    b.HasKey("SubscriptionId", "ExecutionTime");

                    b.ToTable("SubscriptionExecutionRecord", "Subscription");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.SubscriptionParameter", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Values")
                        .HasColumnType("TEXT");

                    b.HasKey("SubscriptionId", "Name");

                    b.ToTable("SubscriptionParameter", "Subscription");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.SubscriptionSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DayOfMonth")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Hour")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Minute")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Month")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Second")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("SubscriptionSchedule", "Subscription");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.CustomQueries.StoredQueryParameter", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.CustomQueries.StoredQuery", "Query")
                        .WithMany("Parameters")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.BusinessTransaction", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.Event", "Event")
                        .WithMany("Transactions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.ContactInformation", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.StandardBusinessHeader", "Header")
                        .WithMany("ContactInformations")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Header");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.CorrectiveEventId", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.Event", "Event")
                        .WithMany("CorrectiveEventIds")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Destination", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.Event", "Event")
                        .WithMany("Destinations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Epc", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.Event", "Event")
                        .WithMany("Epcs")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Event", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Request", "Request")
                        .WithMany("Events")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Field", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.Event", "Event")
                        .WithMany("Fields")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FasTnT.Domain.Model.Events.Field", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("EventId", "ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FasTnT.Domain.Model.Events.SensorElement", "Element")
                        .WithMany("Fields")
                        .HasForeignKey("EventId", "SensorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FasTnT.Domain.Model.Events.SensorReport", "Report")
                        .WithMany("Fields")
                        .HasForeignKey("EventId", "SensorId", "ReportId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Element");

                    b.Navigation("Event");

                    b.Navigation("Parent");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterData", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Request", "Request")
                        .WithMany("Masterdata")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterDataAttribute", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.MasterData", "MasterData")
                        .WithMany("Attributes")
                        .HasForeignKey("RequestId", "MasterdataType", "MasterdataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterData");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterDataChildren", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.MasterData", "MasterData")
                        .WithMany("Children")
                        .HasForeignKey("MasterDataRequestId", "MasterDataType", "MasterDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MasterData");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterDataField", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.MasterDataAttribute", "Attribute")
                        .WithMany("Fields")
                        .HasForeignKey("RequestId", "MasterdataType", "MasterdataId", "AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterDataHierarchy", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.MasterData", "MasterData")
                        .WithMany("Hierarchies")
                        .HasForeignKey("RequestId", "Type", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MasterData");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.PersistentDisposition", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.Event", "Event")
                        .WithMany("PersistentDispositions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.SensorElement", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.Event", "Event")
                        .WithMany("SensorElements")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.SensorReport", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.SensorElement", "SensorElement")
                        .WithMany("Reports")
                        .HasForeignKey("EventId", "SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorElement");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Source", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Events.Event", "Event")
                        .WithMany("Sources")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.StandardBusinessHeader", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Request", "Request")
                        .WithOne("StandardBusinessHeader")
                        .HasForeignKey("FasTnT.Domain.Model.StandardBusinessHeader", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.Subscription", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.CustomQueries.StoredQuery", "Query")
                        .WithMany("Subscriptions")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Query");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.SubscriptionCallback", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Request", "Request")
                        .WithOne("SubscriptionCallback")
                        .HasForeignKey("FasTnT.Domain.Model.Subscriptions.SubscriptionCallback", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.SubscriptionExecutionRecord", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Subscriptions.Subscription", "Subscription")
                        .WithMany("ExecutionRecords")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.SubscriptionParameter", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Subscriptions.Subscription", "Subscription")
                        .WithMany("Parameters")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.SubscriptionSchedule", b =>
                {
                    b.HasOne("FasTnT.Domain.Model.Subscriptions.Subscription", "Subscription")
                        .WithOne("Schedule")
                        .HasForeignKey("FasTnT.Domain.Model.Subscriptions.SubscriptionSchedule", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.CustomQueries.StoredQuery", b =>
                {
                    b.Navigation("Parameters");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Event", b =>
                {
                    b.Navigation("CorrectiveEventIds");

                    b.Navigation("Destinations");

                    b.Navigation("Epcs");

                    b.Navigation("Fields");

                    b.Navigation("PersistentDispositions");

                    b.Navigation("SensorElements");

                    b.Navigation("Sources");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.Field", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterData", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Children");

                    b.Navigation("Hierarchies");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.MasterDataAttribute", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.SensorElement", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Events.SensorReport", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Request", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Masterdata");

                    b.Navigation("StandardBusinessHeader");

                    b.Navigation("SubscriptionCallback");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.StandardBusinessHeader", b =>
                {
                    b.Navigation("ContactInformations");
                });

            modelBuilder.Entity("FasTnT.Domain.Model.Subscriptions.Subscription", b =>
                {
                    b.Navigation("ExecutionRecords");

                    b.Navigation("Parameters");

                    b.Navigation("Schedule");
                });
#pragma warning restore 612, 618
        }
    }
}
